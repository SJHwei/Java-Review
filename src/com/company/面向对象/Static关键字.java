package com.company.面向对象;

import java.sql.SQLOutput;

/**
 * 1. 静态变量
 *   1.1 变量分类: 局部变量, 成员变量, 静态变量.
 *   1.2 初始化:
 *     (1) 成员变量在创建java对象的时候初始化;
 *     (2) 静态变量在类加载阶段赋值, 并且只赋值一次.
 *   1.3 作用: 静态变量被存储在方法区, 所有的java对象共享这一份, 节省了内存,
 *       所以是类级别的.
 *   1.4 访问方式: 类名. ; 也可以使用 引用.
 *   1.5 什么时候变量声明为静态变量: 如果这个属性所有的对象都有, 并且这个属性的值都相同时,
 *       则该属性声明为静态属性.
 *
 * 2. 静态方法
 *   2.1 注意:
 *     (1) 一般情况下工具类中的方法大部分都是静态方法;
 *     (2) 重点: 静态方法不能直接访问非静态数据, 静态方法不能使用this关键字.
 *   2.2 访问方式:
 *     (1) 成员方法必须使用 引用. 调用;
 *     (2) 静态方法使用 类名. 调用, 也可以使用 引用. 调用.
 *   2.3 空指针异常:
 *     (1) 空的引用去访问成员的时候会出现空指针异常;
 *     (2) 空的引用去访问静态方法不会出现空指针异常, 因为底层还是使用 类名. 方式访问的.
 *
 * 3. 静态语句块
 *   3.1 重点: 静态语句块在类加载阶段执行, 并且只执行一次, 而且是自上而下的顺序执行.
 *   3.2 关于实例语句块:
 *     (1) 每次调用构造方法之前会执行一次;
 *     (2) 实例语句块执行顺序也是自上而下的.
 *
 * 4. 其他知识:
 *   4.1 注意: 学习static关键字时可以通过对比的方式进行, 成员变量和静态变量; 成员方法和静态方法; 实例语句块和静态语句块.
 *   4.2 一个类中含有: 成员变量, 成员方法, 静态变量, 静态方法, 静态语句块, 实例语句块, 构造方法, this.
 *   4.3 关于代码的顺序(非法向前引用--访问在声明前): 成员变量和成员方法不受顺序的影响; 静态变量和静态方法受顺序的影响, 因为它们是在类加载阶段执行.
 *
 * */
public class Static关键字 {

    // 静态变量
    static int a = 1;
    // 静态语句块
    static {
        System.out.println(a);
    }

    public static void main(String[] args) {
        {
            System.out.println("1111");
        }
//        System.out.println(a1);
//        int a = 1;
        Animal a1 = new Animal("AAA", 10);
        Animal a2 = new Animal("BBB", 11);
        {
            System.out.println(a2);
        }
        System.out.println(a1);
    }
}

// 抽象现实世界中的陆生生物
class Animal{

    // 成员变量(一个对象一份.)
    String name;
    int age;
    //静态变量(只有一份)
    static String type = "陆生";

    //Constructor
    Animal(String name, int age) {
        this.name = name;
        this.age = age;
        System.out.println("111");
    }
}