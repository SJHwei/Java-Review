package com.company.面向对象.类的多态;

/**
 * 1. 关于java语言中向上转型和向下转型:
 *   1.1 向上转型(upcasting): 子 --> 父
 *       (1) 粗略说明: 向上转型又被称作自动类型转换, 即父类型的引用指向子类型对象.
 *       (2) 详细说明: 程序分为两个阶段, 编译阶段和运行阶段.
 *           1> Animal a1 = new Cat() : 程序编译阶段只知道a1是一个animal类型, 程序在运行的时候堆中的实际对象cat对象/
 *           2> a1.eat() : 程序在编译阶段a1被编译器看做animal类型, 所以程序在编译阶段a1引用绑定的是animal类中的eat方法(静态绑定).
 *                         程序在运行的时候堆中的对象实际上是cat类型, 而cat已经重写了eat方法, 所以程序在运行阶段对象的绑定的方法是cat中的eat方法(动态绑定).
 *       (3) 注意: 向上转型中调用的方法是继承的方法, 也就是子类和父类都有的, 不是子类特有的方法.
 *   1.2 向下转型(downcasting): 父 --> 子
 *       (1) 粗略说明: 向下转型又被称作强制类型转换.
 *       (2) 详细说明: 当前父类型引用指向了子类型对象, 要想执行子类中特有的方法只能强制类型转换, 需要加强制类型转换符.
 *       (3) 具体做法: 在做强制类型转换的时候程序是存在风险的! 为了避免classcastexception的发生, java引入了instanceof.
 *       (4) instanceof的用法:
 *           1> 返回值类型: boolean类型.
 *           2> 格式: (引用 instanceof 类型) --> true/false
 *           3> 例子: (a instanceof Cat)如果结果是true表示a引用指向堆中的java对象是Cat类型.
 *       (5) 注意: 向下类型转换中调用的方法是子类特有的方法.
 *
 * 2. 多态的作用:
 *    (1) 使用多态可以使代码之间的耦合度降低;
 *    (2) 项目的扩展能力增强.
 *
 * 3. 注意:
 *    (1) 尽量不要面向具体编程, 面向父类型编程, 面向抽象编程.
 *    (2) 无论是向上转型还是向下转型, 两个类之间必须要有继承关系.
 * */
public class 多态 {
}
