package com.company.异常处理;

/**
 * 1. Throwable类继承Object类, Throwable类表示所有的异常都是可抛出的, 该类有两个直接子类, 一个是Error类, 表示错误; 一个是Exception类, 表示异常.
 *
 * 2. Error类表示错误, java程序运行过程中如果出现了错误, 错误是不能处理的, 只能退出JVM. 例如: stackoverflowerror.
 *
 * 3. Exception类表示异常, 异常时可以处理的. 如果没有处理异常则程序直接退出JVM.
 *
 * 4. 异常分为两类: 编译时异常和运行时异常. 即Exception类有两种子类, 一种是编译时异常子类, 另一种是运行时异常子类(RuntimeException).
 *
 * 5. 编译时异常发生的几率比较高, 所有的Exception的直接子类都是编译时异常, 所有的编译时异常, 要求程序员在编写程序阶段必须对它进行处理.
 *    如果不处理的话, 编译无法通过. 处理异常有两种方式: 捕捉和声明抛出. 捕捉: try...catch... , 声明抛出就是在方法声明的位置上使用throws关键字抛出异常.
 * 6. 运行时异常发生的几率比较低, 所有的RuntimeException的子类都是运行时异常, RuntimeException是Exception的一个直接子类.
 *    运行时异常程序员在编写阶段不需要对它进行处理.
 *
 * 7. 编译时异常发生几率比较高, 所以需要在编译前处理; 运行时异常发生几率比较低, 所以在编译前不需要处理.
 *    可以与现实世界类比: 如果出门要带五百万现金, 那么被抢的几率高, 所以出门前要处理, 比如用不透明袋子装着. 出门被天上飞机的轮子砸中可能发生, 但是几率很小, 所以不需要在出门前处理.
 * */
public class 异常的分类 {
}
