package com.company.多线程.多线程的基本概念;

/**
 * 1. 进程的概念:
 *    一个进程对应一个程序. 在同一个操作系统中, 可以同时启动多个进程.
 *
 * 2. 多进程的作用:
 *    (1) 单进程只能做一件事.
 *        例如: 一边玩游戏(游戏进程)一边听音乐(音乐进程). 对于单核计算机来讲, 在同一个时间点上, 游戏进程和音乐进程是同时运行的吗?
 *        答: 不是, 因为计算机的CPU只能在某个时间点上做一件事, 由于计算机将在游戏进程和音乐进程之间频繁的切换执行. 切换速度极高, 人类感觉游戏和音乐在同时进行.
 *    (2) (重点作用)多进程的作用不是提高执行速度, 而是提高CPU的使用率.
 *    (3) (重点)进程和进程之间是内存独立的.
 *
 * 3. 线程的概念:
 *    线程是一个进程中的执行场景, 一个进程可以启动多个线程.
 *
 * 4. 多线程的作用:
 *    (1) (重点作用)多线程不是为了提高执行速度, 而是提高应用程序的使用率.
 *    (2) (重点)线程和线程共享堆内存和方法区内存, 栈内存是独立的, 一个线程一个栈.
 *    (3) 可以给现实世界中的人类一种错觉: 感觉多个线程在同时并发执行.
 *
 * 5. 使用进程和线程分析java程序的运行:
 *    (1) java命令会启动java虚拟机, 启动JVM, 等于启动了一个应用程序, 表示启动了一个进程. 该进程会自动启动一个主线程. 然后主线程去调用某个类的main方法, 所以main方法运行在主线程中, 在此之前的所有程序都是单线程的.
 *
 */
public class 多线程的基本概念 {

    /*
    * 分析一下程序有几个线程?
    *     一下程序只有一个线程, 就是主线程.
    *     main, m1, m2, m3这四个方法在同一个栈空间中.
    *     没有启动其他任何线程.
    * */
    public static void main(String[] args) {
        m1();
    }

    public static void m1() {
        m2();
    }

    public static void m2() {
        m3();
    }
    public static void m3() {
        System.out.println("m3...");
    }
}
