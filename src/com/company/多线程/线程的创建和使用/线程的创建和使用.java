package com.company.多线程.线程的创建和使用;

/**
 * 1. java中实现多线程的第一种方式:
 *    (1) 步骤:
 *        1> 第一步: 继承java.lang.Thread;
 *        2> 第二步: 重写run方法.
 *    (2) 三个知识点:
 *        1> 如何定义线程: 继承Thread类, 重写run方法, 在run方法中写的就是要在其他线程中的事情.
 *        2> 如何创建线程: new一个继承了Thread的子类(使用了多态(向上转型): 父类型引用指定子类型对象).
 *        3> 如何启动线程: 使用Thread类的成员方法start(), 进程对象.start().
 *    (3) t.start()的原理:
 *        1> 启动线程, 这行代码执行瞬间结束. 告诉JVM再分配一个新的栈给t线程.
 *        2> run方法不需要程序员手动调用, 系统线程启动后自动调用run方法, run方法中写的就是要在其他线程中做的事情.
 *    (4) 有了多线程之后, main方法结束只是主线程栈中没有方法栈帧了. 但是其他线程或者其他栈中还有栈帧. 所以main方法结束后, 程序可能还在运行.
 *
 * 2. java中实现多线程的第二种方式:
 *    (1) 步骤:
 *        1> 第一步: 写一个类实现java.lang.Runnable接口.
 *        2> 第二步: 实现run方法.
 *    (2) 注意: Thread类有两种构造方法, 一种是无参数的, 适用于实现多线程的第一种方式(通过继承, 作为父类调用该构造方法实现的); 另一种是参数类型是Runnable类型的, 适用于实现多线程的第二种方式.
 *
 * 3. 推荐: 使用第二种方式. 因为一个类实现接口之外保留了类的继承. 同时面向接口编程, 降低了耦合度.
 *
 * 4. 总结:
 *    (1) 实现一个功能可以有两种方式, 第一种就是自定义一个类直接继承功能类, 重写功能类中相应的方法, 然后创建功能类的对象(使用了多态);
 *        第二种就是自定义一个类实现功能类的特性(接口), 表示自定义的类具有了相应的特性, 然后将自定义的类的对象作为功能类的构造方法的参数(使用了多态)来创建功能类的对象(使用了多态).
 *    (2) 接口常常用来表示一个类具有的某种特性. 而抽象类常常用来表示一个实体的祖类, 创建多个具有不同特点的具体子类.
 */
public class 线程的创建和使用 {

    public static void main(String[] args) {

        //实现多线程的第一种方式:

        //创建线程
        Thread t = new Processor();
        //启动
        t.start(); //这段代码执行瞬间结束. 告诉JVM再分配一个新的栈给t线程
                   //run不需要程序员手动调用, 系统线程启动之后自动调用run方法

        //t.run(); //这是普通方法调用, 这样做程序只有一个线程, run方法结束之后, 下面程序才能继续执行

        //这段代码在主线程中运行
        for(int i = 0; i < 10; i++) {
            System.out.println("main--->" + i);
        }

        //有了多线程之后, main方法结束只是主线程中没有方法栈帧了
        //但是其他线程或者其他栈中还有栈帧
        //main方法结束, 程序可能还在运行


        //实现多线程的第二种方式:

        //创建线程
        Thread t1 = new Thread(new Processor1());

        //启动
        t.start();
    }
}

//定义一个线程
class Processor extends Thread {

    //重写run方法
    public void run() {
        for(int i = 0; i<30; i++) {
            System.out.println("run--->" + i);
        }
    }
}

//这种方式是推荐的. 因为一个类实现接口之外保留了类的继承
class Processor1 implements Runnable {
    public void run() {
        for(int i = 0; i < 10; i++) {
            System.out.println("run--->" + i);
        }
    }
}